

@page "/regions"

@attribute [Authorize(AricCarPermissions.Regions.Default)]
@using AricCar.Permissions
@using AricCar.Regions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Components


@inherits AricCarComponentBase
@inject IRegionAppService RegionsAppService
@inject IUiMessageService UiMessageService




@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Regions"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Row>
            <div class="col col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="RegionSearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.ProvincialName"
                                        Autofocus="true"
                                        Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="RegionSearchForm" Clicked="GetRegionsAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>
                
       <div class="col-md-4 col-lg-2">
            <div class="mb-3">
               <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                         Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">@L["Filters"]
                         <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
               </Button>
            </div>
       </div>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")"  class="mt-3">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="EngineTypeEnum?"
		SelectedValue="@Filter.Type"
		SelectedValueChanged="@OnTypeChangedAsync">

<SelectItem></SelectItem>

@foreach(EngineTypeEnum value in Enum.GetValues(typeof(EngineTypeEnum)))
{
	<SelectItem Value="value">
		@value
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["Enable"]</FieldLabel>
                        <Select TValue="bool?"
		SelectedValue="@Filter.Enable"
		SelectedValueChanged="@OnEnableChangedAsync">

<SelectItem></SelectItem>
<SelectItem Value="true">@L["Yes"]</SelectItem>
<SelectItem Value="false">@L["No"]</SelectItem>

</Select>                       
                    </Field>
                </Column>
            </Row>

        </div>

        </Row>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="RegionDto"
                  Data="RegionList"
                  
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                       <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>   
            <DataGridColumns>
                
                
                <DataGridEntityActionsColumn TItem="RegionDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="RegionDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="RegionDto"
                                          Visible="@CanEditRegion"
                                          Clicked="async () => await OpenEditRegionModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="RegionDto"
                                          Visible="@CanDeleteRegion"
                                          Clicked="() => DeleteRegionAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="RegionDto"
                      Field="Type"
                      Caption="@L["Type"]">
                    <DisplayTemplate>
                        @L[$"Enum:EngineTypeEnum.{(int)context.Type}"]
                    </DisplayTemplate>
              </DataGridColumn>


              <DataGridColumn TItem="RegionDto"
                      Field="Host"
                      Caption="@L["Host"]">
              </DataGridColumn>

              <DataGridColumn TItem="RegionDto"
                      Field="TimeOut"
                      Caption="@L["TimeOut"]">
              </DataGridColumn>

              <DataGridColumn TItem="RegionDto"
                      Field="Enable"
                      Caption="@L["Enable"]">
                    <DisplayTemplate>
                        @if (context.Enable)
                        {
                            <Icon TextColor="TextColor.Success" Name="@IconName.Check" />
                        }
                        else
                        {
                            <Icon TextColor="TextColor.Danger" Name="@IconName.Times" />
                        }
                    </DisplayTemplate>
              </DataGridColumn>


            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreateRegionModal" Closing="@CreateRegionModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreateRegionForm">
            <ModalHeader>
                <ModalTitle>@L["NewRegion"]</ModalTitle>
                <CloseButton Clicked="CloseCreateRegionModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewRegionValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewRegion"
                            ValidateOnLoad="false">
                    
                    
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="EngineTypeEnum" @bind-SelectedValue="@NewRegion.Type" >
                            @foreach (var itemValue in Enum.GetValues(typeof(EngineTypeEnum)))
                            {
                                <SelectItem TValue="EngineTypeEnum" Value="@((EngineTypeEnum) itemValue)">
                                    @L[$"Enum:EngineTypeEnum.{((EngineTypeEnum) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Host"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewRegion.Host" MaxLength="RegionConsts.HostMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["TimeOut"] *</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@NewRegion.TimeOut"  Min="RegionConsts.TimeOutMinLength" Max="RegionConsts.TimeOutMaxLength" Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@NewRegion.Enable" >@L["Enable"]</Check>
                    </Field>

                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateRegionModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateRegionForm" Clicked="CreateRegionAsync"/>

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditRegionModal" Closing="@EditRegionModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditRegionForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditRegionModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingRegionValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingRegion"
                            ValidateOnLoad="false">
                    
                    
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="EngineTypeEnum" @bind-SelectedValue="@EditingRegion.Type" >
                            @foreach (var itemValue in Enum.GetValues(typeof(EngineTypeEnum)))
                            {
                                <SelectItem TValue="EngineTypeEnum" Value="@((EngineTypeEnum) itemValue)">
                                    @L[$"Enum:EngineTypeEnum.{((EngineTypeEnum) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Host"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingRegion.Host" MaxLength="RegionConsts.HostMaxLength" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["TimeOut"] *</FieldLabel>
                            <NumericPicker TValue="int" @bind-Value="@EditingRegion.TimeOut"  Min="RegionConsts.TimeOutMinLength" Max="RegionConsts.TimeOutMaxLength" Decimals="0" >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                             </NumericPicker>
                        </Field>
                     </Validation>


                    <Field>
                        <Check TValue="bool" @bind-Checked="@EditingRegion.Enable" >@L["Enable"]</Check>
                    </Field>

                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditRegionModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditRegionForm" Clicked="UpdateRegionAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

